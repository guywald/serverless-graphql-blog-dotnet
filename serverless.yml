service: serverless-graphql-blog-dotnet

frameworkVersion: ">=1.9.0"

provider:
  name: aws
  stage: dev
  region: us-east-1
  
  environment:
    DYNAMODB_POSTS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-blog-posts"
    DYNAMODB_AUTHORS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-blog-authors"
    DYNAMODB_COMMENTS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-blog-comments"

  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - dynamodb:*
    Resource: 
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_POSTS_TABLE}"
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_AUTHORS_TABLE}"
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_COMMENTS_TABLE}"
  - Effect: Allow
    Action:
    - logs:CreateLogGroup
    - logs:CreateLogStream
    - logs:PutLogEvents
    Resource: arn:aws:logs:${self:provider.region}:*:*      

package:
  artifact: bin/release/netcoreapp1.0/publish/deploy-package.zip

functions:
  graphql-dotnet:
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::GraphQL
    runtime: dotnetcore1.0
    events:
      - http:
          path: graphql
          method: post
          integration: lambda-proxy
          # cors: true

resources:
  Resources:
    BlogPostsDynamo:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_POSTS_TABLE}

    BlogAuthorsDynamo:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_AUTHORS_TABLE}

    BlogPostCommentsDynamo:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_COMMENTS_TABLE}                

Outputs:
  PostsTableOutput:
    Description: "Dynamo DB Posts table"
    Value: "${self:provider.environment.DYNAMODB_POSTS_TABLE}"
  AuthorsTableOutput:
    Description: "Dynamo DB Authors table"
    Value: "${self:provider.environment.DYNAMODB_AUTHORS_TABLE}"
  PostCommentsTableOutput:
    Description: "Dynamo DB Post Comments table"
    Value: "${self:provider.environment.DYNAMODB_COMMENTS_TABLE}"
