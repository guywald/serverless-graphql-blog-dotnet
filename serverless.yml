service: sserverless-graphql-blog-dotnet-nodejs

frameworkVersion: ">=1.9.0"

provider:
  name: aws
  stage: dev
  region: us-east-1
  
  environment:
    DYNAMODB_POSTS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-blog-posts"
    DYNAMODB_AUTHORS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-blog-authors"
    DYNAMODB_COMMENTS_TABLE: "${self:service}-${opt:stage, self:provider.stage}-blog-comments"

  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - dynamodb:*
    Resource: 
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_POSTS_TABLE}"
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_AUTHORS_TABLE}"
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_COMMENTS_TABLE}"

# package:
#   artifact: bin/release/netcoreapp1.0/publish/deploy-package.zip

  #exclude NodeJS files from C# build
  exclude:
    handler: graphql_handler.graphql
      - graphql_handler.js

functions:
  # hello:
  #   handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello
  #   runtime: dotnetcore1.0
  #   events:
  #     - http:
  #       path: hello
  #       method: post
  #       cors: true
  #       integration: lambda-proxy
  #       requestParameters: {}
  #       requestTemplates:
  #         application/json: '{"query" : $input.json("$")}'

  graphql:
    handler: graphql_handler.graphql
    runtime: nodejs4.3
    events:
      - http:
          path: graphql
          method: post
          cors: true
          integration: lambda-proxy

resources:
  Resources:
    BlogPostsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: Id
            AttributeType: S
        KeySchema:
          -
            AttributeName: Id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_POSTS_TABLE}

    BlogAuthorsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: Id
            AttributeType: S
        KeySchema:
          -
            AttributeName: Id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_AUTHORS_TABLE}

    BlogPostCommentsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: Id
            AttributeType: S
        KeySchema:
          -
            AttributeName: Id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_COMMENTS_TABLE}                

Outputs:
  PostsTableOutput:
    Description: "Dynamo DB Posts table"
    Value: "${self:provider.environment.DYNAMODB_POSTS_TABLE}"
  AuthorsTableOutput:
    Description: "Dynamo DB Authors table"
    Value: "${self:provider.environment.DYNAMODB_AUTHORS_TABLE}"
  PostCommentsTableOutput:
    Description: "Dynamo DB Post Comments table"
    Value: "${self:provider.environment.DYNAMODB_COMMENTS_TABLE}"
